HTTP Method     URI                                                 Action
============================================================================================
x GET             http://[hostname]/todo/api/v1.0/tasks               Retrieve list of tasks
x POST            http://[hostname]/todo/api/v1.0/tasks               Create a new task

x GET             http://[hostname]/todo/api/v1.0/tasks/[task_id]     Retrieve a task
x PUT             http://[hostname]/todo/api/v1.0/tasks/[task_id]     Update an existing task
x DELETE          http://[hostname]/todo/api/v1.0/tasks/[task_id]     Delete a task


instead of module create Todo package
implement logging (signals?)
implement database
implement unit tests

if all this is complete, the the basic platform features are done
we can start implementing the board services

- rest api (!!! AZ ID Nem lehet mindig az utolso-nal egyel nagyobb mert akkor ujrahasznalnank IDkat!!!)
- ^ also this crashes the app when there are 0 tasks, then tasks[-1] is an exception
- objects in observablearrays are not observed, only array manipulations -> tasks.valueHasMutated();
- Cross Origin Resource Sharing
- split it into modules
- config to set blueprint url prefixes for each part /branches /freezes etc
- Use database (sqlite, mysql)
- logging (file? sqlite?)
- unit test https://github.com/xmm/flask-restful-example/blob/master/api/tests/test_api_v2.py
- authentication? login? ldap?

C:\xampp\apache\bin>ab -n 10000 -c 10 http://127.0.0.1:5000/api/v1.0/tasks



# DB DB DB
load data
update data
insert data (get new id)
delete
logging (maybe switch to streamhandler? like reddit?)
refactor + CONFIG

Hide the data objects, create classes (models) with accessors to the data
create a database.py module file with an initialization function that can be called by app

database manager, multiple databases?


===============================================================
PRONTO PROGRESS TRACKER
===============================================================
Ideas: http://www.smashingmagazine.com/2008/11/13/15-useful-project-management-tools/
       https://www.activecollab.com/features.html

If we want to show some personal pronto statistics, we will need to either log in the user,
or simply search for user name. Or track pronto groups and filter for name. This is probably the best solution.
Add pronto groups manually via admin interface (or edit db?:) )

Active/Open Prontos
Overall progress bar (New/Investigating/?Ready For Testing?/First Correction Complete/Final Response Sent/Closed)
    Also track correction completeness with progress bar (1/10 Tested etc)
        check git repos to see where the branch is? (see if it's merged into master? check merge commit message or parse repo stuff)
        check dcif to see the correction status there? (probably a feature for later)
        remove dcif projects when the correction is tested or CN accepted? Or when the pronto is closed remove all dcif projects?

    Also track change notes (if needed) (1/10 CN)
        Draft/Validated/Accepted? or just simply track accepted?
    Only for not needless corrections

Show Internal/Customer correction times, how much time left?
Order prontos by time left and priority?! And top importance maybe?

On click open detailed pronto information, where people can see each correction seprately
maybe even override the automatic status manually?

MANDATORY > Md16.1 EP1  - Tested                [Update, Create Project, Delete Project]
MANDATORY > Ma16.2      - Correcting            [Update, Create Project, Delete Project]
NEEDLESS  > Tv16.2                              [Update, Create Project, Delete Project]
OPTIONAL  > MSS15       - Ready for testing     [Update, Create Project, Delete Project]

Progress bar for first correction (status: correcting/ready for testing/tested/)

The ability to manually delete DCIF projects for one correction or the entire pronto
The ability to manually update the details of a pronto for one correction, or the entire pronto

The ability to somehow get images or sack files for the pronto??? (maybe later)

===============================================================
FREEZE TRACKER
===============================================================
List pronto freezes, add new freezes
Similar to the tas xls

Should probably track frozen prontos instead of frozen program blocks (or have both views?)
pronto - release - prb - responsible - CN needed? - whatever else in the XLS




TORNADO exceptions / errors need to be logged (mysql error after VM restart)
https://dev.mysql.com/doc/refman/5.0/en/gone-away.html
http://docs.sqlalchemy.org/en/latest/core/pooling.html (search automatic..)
